# coding:utf-8
import tensorflow as tf
import numpy as np
from tensorflow.examples.tutorials.mnist import input_data
# download this tarin data
mnist = input_data.read_data_sets('MNIST_data', one_hot=True)

# define prediction's percentage
def compute_accuracy(v_xs, v_ys):
    global prediction
    y_pre = sess.run(prediction, feed_dict={xs: v_xs, keep_prob: 1})
    correct_prediction = tf.equal(tf.argmax(y_pre, 1), tf.argmax(v_ys, 1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    result = sess.run(accuracy,feed_dict={xs: v_xs,ys: v_ys, keep_prob: 1})
    return result

# define placeholder for input
xs = tf.placeholder(tf.float32, [None, 784])    # 28*28
ys = tf.placeholder(tf.float32, [None, 10])
# define keep_prob for handle overfitting
keep_prob = tf.placeholder(tf.float32)
# define x_Image for reshape
x_image = tf.reshape(xs, [-1, 28, 28, 1])   # 28*28  1 equal black and white
# print(x_image.shape)  # n_sample 28*28]

def Weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)

def Biases_variable(shape):
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)

## x= image W=Weight
def conv2d(x,W):
    #  strides [1,x_movement,y_movement,1]   步长
    # Must have strides[0]= strides[3]=1
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')
def max_pool_2x2(x):
    #  strides [1,x_movement,y_movement,1]   步长
    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

## conv1 layer ##
w_conv1 = Weight_variable([5, 5, 1, 32])     # patch:5x5, insize:1, out size:32 equal height
b_conv1 = Biases_variable([32])
h_conv1 = tf.nn.relu(conv2d(x_image, w_conv1)+b_conv1)    # output size:28*28*32     # tf.nn.relu() 非线性得处理
h_pool1 = max_pool_2x2(h_conv1)                          # output size:14*14*32
## conv2 layer ##
w_conv2 = Weight_variable([5, 5, 32, 64])    # patch:5x5, insize:32, out size:64 equal height
b_conv2 = Biases_variable([64])
h_conv2 = tf.nn.relu(conv2d(h_pool1, w_conv2)+b_conv2)    # output size:14*14*64     # tf.nn.relu() 非线性得处理
h_pool2 = max_pool_2x2(h_conv2)                          # output size:7*7*64
## func1 layer ##
W_fc1 = Weight_variable([7*7*64, 1024])
b_fc1 = Biases_variable([1024])
h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])      # [n_samples, 7,7,64] => [n_samples,7*7*64]
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)   # y=wx+b
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)      # handle overfitting
##func2 layer ##
W_func2 = Weight_variable([1024, 10])
b_func2 = Biases_variable([10])
prediction = tf.nn.softmax(tf.matmul(h_fc1_drop, W_func2)+ b_func2)

# the loss between the prediction  result and the rela data
cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction), reduction_indices=[1]))       # loss
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

# define Session
sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)
#  start train
for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys, keep_prob: 0.5})
    if i % 50 == 0:
        print(compute_accuracy(mnist.test.images, mnist.test.labels))
